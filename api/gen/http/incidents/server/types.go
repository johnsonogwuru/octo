// Code generated by goa v3.10.2, DO NOT EDIT.
//
// Incidents HTTP server types
//
// Command:
// $ goa gen github.com/ogwurujohnson/shareabletypes/api/design -o api

package server

import (
	incidents "github.com/ogwurujohnson/shareabletypes/api/gen/incidents"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "Incidents" service "Create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of the incident
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateResponseBody is the type of the "Incidents" service "Create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique identifier for the incident
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the incident
	Name string `form:"name" json:"name" xml:"name"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "Create" endpoint of the "Incidents" service.
func NewCreateResponseBody(res *incidents.Incident) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewCreatePayload builds a Incidents service Create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *incidents.CreatePayload {
	v := &incidents.CreatePayload{
		Name: *body.Name,
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
